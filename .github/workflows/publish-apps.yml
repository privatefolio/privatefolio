name: Publish Apps

on:
  push:
    tags: [ "*" ]

  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

permissions:
  contents: write

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-publish:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    environment:
      name: production
      url: https://github.com/privatefolio/privatefolio/releases/tag/${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Cache yarn downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/yarn/v6
          key: yarn-cache-${{ runner.os }}-${{ hashFiles('./yarn.lock') }}
          restore-keys: yarn-cache-${{ runner.os }}-

      - name: Cache node_modules (root)
        uses: actions/cache@v4
        with:
          path: ./node_modules
          key: deps-root-${{ runner.os }}-${{ hashFiles('./yarn.lock') }}
          restore-keys: deps-root-${{ runner.os }}-

      - name: Cache node_modules (packages)
        uses: actions/cache@v4
        with:
          path: ./packages/**/node_modules
          key: deps-packages-${{ runner.os }}-${{ hashFiles('./yarn.lock') }}
          restore-keys: deps-packages-${{ runner.os }}-

      - name: Export Snapcraft credentials
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "SNAPCRAFT_STORE_CREDENTIALS=${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}" >> $GITHUB_ENV

      - name: Export macOS signing secrets
        if: matrix.os == 'macos-latest'
        run: |
          echo "CSC_LINK=${{ secrets.CSC_LINK }}" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=${{ secrets.CSC_KEY_PASSWORD }}" >> $GITHUB_ENV
          echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" >> $GITHUB_ENV
          echo "APPLE_ID=${{ secrets.APPLE_ID }}" >> $GITHUB_ENV
          echo "APPLE_APP_SPECIFIC_PASSWORD=${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" >> $GITHUB_ENV

      - name: Create temp keychain & import cert
        if: matrix.os == 'macos-latest'
        run: |
          # 1 Create / unlock isolated keychain
          security create-keychain -p temp-pass build.keychain
          security default-keychain  -s build.keychain
          security unlock-keychain   -p temp-pass build.keychain

          # 2 Decode the base64-encoded .p12 coming from CSC_LINK
          echo "$CSC_LINK" | base64 --decode > /tmp/cert.p12

          # 3 Import the cert (PKCS#12) and allow codesign / productsign
          security import /tmp/cert.p12 \
            -k build.keychain \
            -f pkcs12 \
            -P "$CSC_KEY_PASSWORD" \
            -T /usr/bin/codesign \
            -T /usr/bin/productsign

          # 4 Give build tools non-interactive access
          security set-key-partition-list -S apple-tool:,apple: -s -k temp-pass build.keychain
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo dpkg --add-architecture i386
          wget -nc https://dl.winehq.org/wine-builds/winehq.key
          sudo apt-key add winehq.key
          sudo apt-add-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ jammy main'
          sudo apt update
          sudo apt install -y --install-recommends winehq-stable
          sudo apt install -y mono-complete
          sudo snap install snapcraft --classic
          wine64 --version
          mono --version
          snapcraft --version
          yarn install --frozen-lockfile

      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: yarn install --frozen-lockfile

      - name: Build and Publish Binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          yarn build-bin:linux

      - name: Publish Snap
        if: matrix.os == 'ubuntu-latest'
        run: |
          snapcraft upload --release=stable "$(realpath ./packages/electron/out/*.snap)"

      - name: Build and Publish Binary (Windows)
        if: matrix.os == 'ubuntu-latest'
        run: |
          yarn build-bin:win

      - name: Build and Publish Binary (macOS)
        if: matrix.os == 'macos-latest'
        run: yarn build-bin:mac

      - name: Notify Discord on success
        if: success()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_DEPLOYMENTS_WEBHOOK }}
          status: "Success"
          title: "Privatefolio - Publish Apps Succeeded"
          description: |
            **Branch**: `${{ github.ref_name }}`
            **Commit**: `${{ github.sha }}`
          color: 0x00FF00

      - name: Notify Discord on failure
        if: failure()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_DEPLOYMENTS_WEBHOOK }}
          status: "Failure"
          title: "Privatefolio - Publish Apps Failed"
          description: |
            **Branch**: `${{ github.ref_name }}`
            **Commit**: `${{ github.sha }}`
          color: 0xFF0000
