name: Publish Apps

on:
  push:
    tags: ["*"]

  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

permissions:
  contents: write

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-publish:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    environment:
      name: production
      url: https://github.com/privatefolio/privatefolio/releases/tag/${{ github.ref_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x

      - name: Cache yarn downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/yarn/v6
          key: yarn-cache-${{ runner.os }}-${{ hashFiles('./yarn.lock') }}
          restore-keys: yarn-cache-${{ runner.os }}-

      - name: Cache node_modules (root)
        uses: actions/cache@v4
        with:
          path: ./node_modules
          key: deps-root-${{ runner.os }}-${{ hashFiles('./yarn.lock') }}
          restore-keys: deps-root-${{ runner.os }}-

      - name: Cache node_modules (packages)
        uses: actions/cache@v4
        with:
          path: ./packages/**/node_modules
          key: deps-packages-${{ runner.os }}-${{ hashFiles('./yarn.lock') }}
          restore-keys: deps-packages-${{ runner.os }}-

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo dpkg --add-architecture i386
          wget -nc https://dl.winehq.org/wine-builds/winehq.key
          sudo apt-key add winehq.key
          sudo apt-add-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ jammy main'
          sudo apt update
          sudo apt install -y --install-recommends winehq-stable
          sudo apt install -y mono-complete
          sudo snap install snapcraft --classic
          wine64 --version
          mono --version
          snapcraft --version
          yarn install --frozen-lockfile

      - name: Build and Publish Binary (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: yarn build-bin:linux
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_STORE_CREDENTIALS }}

      - name: Build and Publish Binary (Windows)
        if: matrix.os == 'ubuntu-latest'
        run: yarn build-bin:win

      - name: Install Dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: yarn install --frozen-lockfile

      - name: Build and Publish Binary (macOS)
        if: matrix.os == 'macos-latest'
        run: yarn build-bin:mac && yarn build-bin:mac-x64
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}

      - name: Submit DMGs for Notarization
        if: matrix.os == 'macos-latest'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          mkdir -p notarization
          shopt -s nullglob
          for dmg in packages/electron/out/*.dmg; do
            echo "Notarizing $dmg"
            xcrun notarytool submit "$dmg" \
              --apple-id "$APPLE_ID" \
              --team-id "$APPLE_TEAM_ID" \
              --password "$APPLE_APP_SPECIFIC_PASSWORD" \
              --output-format json > "notarization/$(basename "$dmg").json"
          done

      - name: Upload Notarization JSONs to Existing Draft Release
        if: matrix.os == 'macos-latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag="${GITHUB_REF#refs/tags/}"
          gh release upload "$tag" notarization/*.json --repo ${{ github.repository }} --clobber

  notify:
    needs: build-and-publish
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify Discord
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_DEPLOYMENTS_WEBHOOK }}
          status: ${{ needs.build-and-publish.result == 'success' && 'Success' || 'Failure' }}
          title: 'Publish Desktop Apps'
          description: |
            **Branch**: `${{ github.ref_name }}`
            **Commit**: `${{ github.sha }}`
          color: ${{ needs.build-and-publish.result == 'success' && '0x00FF00' || '0xFF0000' }}
