name: Staple Mac Apps

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

  schedule:
    - cron: "0 * * * *" # Run every 1 hour

  workflow_run:
    workflows: ["Publish Apps"]
    types: [completed]

permissions:
  contents: write

env:
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_REPOSITORY: ${{ github.repository }}

jobs:
  check-and-staple:
    runs-on: macos-latest
    outputs:
      stapled: ${{ steps.staple.outputs.stapled }}
      stapled_tags: ${{ steps.staple.outputs.stapled_tags }}
      checked_tags: ${{ steps.staple.outputs.checked_tags }}
    steps:
      - name: Ensure gh CLI available
        run: gh --version

      - name: Get last 5 releases
        id: releases
        run: |
          tags=$(gh release list --repo "$GITHUB_REPOSITORY" --limit 5 --json tagName --jq '.[].tagName')
          echo "tags<<EOF" >> "$GITHUB_OUTPUT"
          echo "$tags" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Staple DMGs if needed
        id: staple
        shell: bash
        run: |
          set -euo pipefail

          # Clean newline-separated tag list (may contain CRs)
          TAG_LIST=$(printf '%s' "${{ steps.releases.outputs.tags }}" | tr -d '\r')

          if [ -z "$TAG_LIST" ]; then
            echo "❌  No releases found." >&2
            exit 1
          fi

          STAPLED=false
          declare -a CHECKED_TAGS=()
          declare -a STAPLED_TAGS=()

          # Process each tag line by line to handle special characters
          while IFS= read -r tag; do
            # Skip empty lines
            [ -z "$tag" ] && continue
            CHECKED_TAGS+=("$tag")
            STAPLED_THIS_RELEASE=false

            echo "🔍  Processing release $tag"
            workdir=$(mktemp -d)
            pushd "$workdir" >/dev/null

            gh release download "$tag" --repo "$GITHUB_REPOSITORY"
            shopt -s nullglob

            for json in *.json; do
              dmg="${json%.json}"

              # Skip if stapled variant already present in the assets
              if [[ -f "${dmg%.dmg}-stapled.dmg" ]]; then
                echo "💤  ${dmg%.dmg}-stapled.dmg already exists — skipping"
                continue
              fi

              uuid=$(jq -r '.id' "$json")
              echo "⏳  Checking notarization for $dmg (UUID: $uuid)…"
              status=$(xcrun notarytool info "$uuid" \
                        --apple-id "$APPLE_ID" \
                        --team-id "$APPLE_TEAM_ID" \
                        --password "$APPLE_APP_SPECIFIC_PASSWORD" \
                        --output-format json | jq -r '.status')
              echo "   • Status: $status"

              if [[ "$status" == "Accepted" ]]; then
                echo "✅  Stapling $dmg"
                xcrun stapler staple "$dmg"
                mv "$dmg" "${dmg%.dmg}-stapled.dmg"
                STAPLED=true
                STAPLED_THIS_RELEASE=true
              elif [[ "$status" == "Invalid" || "$status" == "Rejected" ]]; then
                echo "❌  Notarization failed for $dmg" >&2
                exit 1
              else
                echo "⏸️  Not yet notarized — skipping $dmg"
              fi
            done

            # Upload any newly-stapled DMGs
            shopt -s nullglob
            stapled_files=(*-stapled.dmg)
            if (( ${#stapled_files[@]} )); then
              echo "📤  Uploading stapled DMGs for $tag…"
              gh release upload "$tag" "${stapled_files[@]}" --repo "$GITHUB_REPOSITORY" --clobber
            fi

            if [ "$STAPLED_THIS_RELEASE" = true ]; then
              STAPLED_TAGS+=("$tag")
            fi

            popd >/dev/null
            rm -rf "$workdir"
          done <<< "$TAG_LIST"

          # Export outputs for downstream jobs
          echo "stapled=$STAPLED" >> "$GITHUB_OUTPUT"
          echo "stapled_tags=$(IFS=','; printf '%s' "${STAPLED_TAGS[*]}")" >> "$GITHUB_OUTPUT"
          echo "checked_tags=$(IFS=','; printf '%s' "${CHECKED_TAGS[*]}")" >> "$GITHUB_OUTPUT"

  notify:
    needs: check-and-staple
    if: needs.check-and-staple.result == 'failure' || needs.check-and-staple.outputs.stapled == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notify Discord
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_DEPLOYMENTS_WEBHOOK }}
          status: ${{ needs.check-and-staple.result == 'success' && 'Success' || 'Failure' }}
          title: "Staple Mac Apps"
          description: |
            **Checked versions:** `${{ needs.check-and-staple.outputs.checked_tags }}`
            **Stapled versions:** `${{ needs.check-and-staple.outputs.stapled_tags }}`
            **Branch**: `${{ github.ref_name }}`
            **Commit**: `${{ github.sha }}`
          color: ${{ needs.check-and-staple.result == 'success' && '0x00FF00' || '0xFF0000' }}
