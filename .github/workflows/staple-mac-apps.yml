name: Staple Mac Apps

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

  schedule:
    - cron: "0 * * * *" # Run every 1 hour

permissions:
  contents: write

env:
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_REPOSITORY: ${{ github.repository }}

jobs:
  check-and-staple:
    runs-on: macos-latest
    outputs:
      stapled: ${{ steps.staple.outputs.stapled }}
    steps:
      - name: Ensure gh CLI available
        run: gh --version

      - name: Get latest draft release tag
        id: get_draft
        run: |
          tag=$(gh release list --repo "$GITHUB_REPOSITORY" --limit 10 \
                  --json tagName,isDraft \
                  --jq '.[] | select(.isDraft) | .tagName' | head -n1)
          if [ -z "$tag" ]; then
            echo "❌  No draft release found."
            exit 1
          fi
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "ℹ️  Using draft release: $tag"

      - name: Download draft release assets
        run: |
          mkdir -p release
          cd release
          gh release download "${{ steps.get_draft.outputs.tag }}" --repo "$GITHUB_REPOSITORY"

      - name: Check notarization and staple DMGs
        id: staple
        run: |
          cd release
          shopt -s nullglob
          STAPLED=false
          for json in *.json; do
            uuid=$(jq -r '.id' "$json")
            dmg="${json%.json}"
            echo "⏳  Checking notarization for $dmg (UUID: $uuid)…"
            status=$(xcrun notarytool info "$uuid" \
                      --apple-id "$APPLE_ID" \
                      --team-id "$APPLE_TEAM_ID" \
                      --password "$APPLE_APP_SPECIFIC_PASSWORD" \
                      --output-format json | jq -r '.status')
            echo "   • Status: $status"
            if [[ "$status" == "Accepted" ]]; then
              echo "✅  Stapling $dmg"
              xcrun stapler staple "$dmg"
              mv "$dmg" "${dmg%.dmg}-stapled.dmg"
              STAPLED=true
            elif [[ "$status" == "Invalid" || "$status" == "Rejected" ]]; then
              echo "❌  Notarization failed for $dmg"
              exit 1
            else
              echo "⏸️  Not yet notarized — skipping $dmg"
            fi
          done
          echo "stapled=$STAPLED" >> "$GITHUB_OUTPUT"

      - name: Upload stapled DMGs to draft release
        run: |
          cd release
          echo "📤  Uploading stapled DMGs…"
          gh release upload "${{ steps.get_draft.outputs.tag }}" *-stapled.dmg \
            --repo "$GITHUB_REPOSITORY" --clobber || echo "No stapled DMGs to upload."

  notify:
    needs: check-and-staple
    if: needs.check-and-staple.result == 'failure' || needs.check-and-staple.outputs.stapled == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notify Discord
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_DEPLOYMENTS_WEBHOOK }}
          status: ${{ needs.check-and-staple.result == 'success' && 'Success' || 'Failure' }}
          title: "Staple Mac Apps"
          description: |
            **Branch**: `${{ github.ref_name }}`
            **Commit**: `${{ github.sha }}`
          color: ${{ needs.check-and-staple.result == 'success' && '0x00FF00' || '0xFF0000' }}
